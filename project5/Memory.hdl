// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	//Xor(a=load, b=address[14], out=orload14);
	//And(a=orload14, b=load, out=loadram);
	Not(in=address[14], out=notadd14);
	And(a=load, b=notadd14, out= loadram);
	RAM16K(in=in , load= loadram, address=address[0..13] , out= out1);

	Not(in= address[13], out= not13);
	And(a= address[14], b= not13, out=and1413);
	And(a= load, b=and1413, out=loadscreen);
	Screen(in=in , load= loadscreen, address=address[0..12] , out= out2);
	Mux16(a= out1, b= out2, sel= loadscreen, out= out12);
    Keyboard(out= out3);
    And(a= address[14], b= address[13], out= and1314);
    Mux16(a= out12, b= out3, sel=and1314 , out= out);
    //// Replace this comment with your code.
}