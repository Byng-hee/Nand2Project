// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //witeM은 instruction[15]=1 & instruction[3]=1 일때만 1
	And(a= instruction[15], b=instruction[3], out=writeM);

    //A-Mux기 구현
    Not(in= instruction[15], out=inMuxsel );
    Mux16(a= result, b= instruction, sel= inMuxsel, out= inA);
    //Aregister 구현
    And(a= inMuxsel, b= instruction[5], out= inAregload );
    ARegister(in= inA, load= inAregload, out= Aout);

    //addressM구현
    Or16(a= Aout, b= false, out[0..14]= addressM);

    //PC구현
    Not(in= reset, out= inPCinc);
    Or(a= instruction[0], b= instruction[1], out=or01 );
    Or(a= or01, b= instruction[2], out= isjump);
    PC(in= Aout, load= isjump, inc= inPCinc, reset= reset, out[0..14]=pc);

    //Dregister 구현
    And(a= instruction[4], b= instruction[15], out= inDregload);
    DRegister(in= result, load= inDregload, out= Dout);

    //ALU 구현
    Mux16(a= Aout, b= inM, sel= instruction[12], out= AorM);
    ALU(x= Dout, y= AorM, zx= instruction[11], nx= instruction[10],
        zy= instruction[9], ny= instruction[8], f= instruction[7],
        no= instruction[6], out= result, zr= ZR, ng= NG);
    Or16(a= result, b= false, out= outM);
}