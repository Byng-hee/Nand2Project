// This file is part of the Nand2Tetris course.
// RAM64: A 64-register memory. Each register is 16-bit wide.
// The chip has a 6-bit address input and holds a 16-bit value at each address.
// The load input determines whether to write the value at the given address.
// If load==1, the in value is loaded into the selected register.
// The out output always reflects the value stored at the selected register.

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
	DMux8Way(in= true, sel= address[3..5], a= MSA0, b= MSA1, c= MSA2, d= MSA3, e= MSA4, f= MSA5, g= MSA6, h= MSA7);

	And(a=MSA0, b=load, out=MSAload0);
	And(a=MSA1, b=load, out=MSAload1);
	And(a=MSA2, b=load, out=MSAload2);
	And(a=MSA3, b=load, out=MSAload3);
	And(a=MSA4, b=load, out=MSAload4);
	And(a=MSA5, b=load, out=MSAload5);
	And(a=MSA6, b=load, out=MSAload6);
	And(a=MSA7, b=load, out=MSAload7); 


	RAM8(in= in, load= MSAload0, address= address[0..2], out= out1);
	RAM8(in= in, load= MSAload1, address= address[0..2], out= out2);
	RAM8(in= in, load= MSAload2, address= address[0..2], out= out3);
	RAM8(in= in, load= MSAload3, address= address[0..2], out= out4);
	RAM8(in= in, load= MSAload4, address= address[0..2], out= out5);
	RAM8(in= in, load= MSAload5, address= address[0..2], out= out6);
	RAM8(in= in, load= MSAload6, address= address[0..2], out= out7);
	RAM8(in= in, load= MSAload7, address= address[0..2], out= out8);

	Mux8Way16(a=out1, b=out2, c=out3, d=out4, e=out5, f=out6, g=out7, h=out8, sel=address[3..5], out=out);
}
