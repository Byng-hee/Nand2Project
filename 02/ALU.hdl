// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0
    PARTS:
    Mux(a=x[0], b=false, sel=zx, out=x1_0);
    Mux(a=x[1], b=false, sel=zx, out=x1_1);
    Mux(a=x[2], b=false, sel=zx, out=x1_2);
    Mux(a=x[3], b=false, sel=zx, out=x1_3);
    Mux(a=x[4], b=false, sel=zx, out=x1_4);
    Mux(a=x[5], b=false, sel=zx, out=x1_5);
    Mux(a=x[6], b=false, sel=zx, out=x1_6);
    Mux(a=x[7], b=false, sel=zx, out=x1_7);
    Mux(a=x[8], b=false, sel=zx, out=x1_8);
    Mux(a=x[9], b=false, sel=zx, out=x1_9);
    Mux(a=x[10], b=false, sel=zx, out=x1_10);
    Mux(a=x[11], b=false, sel=zx, out=x1_11);
    Mux(a=x[12], b=false, sel=zx, out=x1_12);
    Mux(a=x[13], b=false, sel=zx, out=x1_13);
    Mux(a=x[14], b=false, sel=zx, out=x1_14);
    Mux(a=x[15], b=false, sel=zx, out=x1_15);

    Not(in=x1_0, out=nx1_0);
    Not(in=x1_1, out=nx1_1);
    Not(in=x1_2, out=nx1_2);
    Not(in=x1_3, out=nx1_3);
    Not(in=x1_4, out=nx1_4);
    Not(in=x1_5, out=nx1_5);
    Not(in=x1_6, out=nx1_6);
    Not(in=x1_7, out=nx1_7);
    Not(in=x1_8, out=nx1_8);
    Not(in=x1_9, out=nx1_9);
    Not(in=x1_10, out=nx1_10);
    Not(in=x1_11, out=nx1_11);
    Not(in=x1_12, out=nx1_12);
    Not(in=x1_13, out=nx1_13);
    Not(in=x1_14, out=nx1_14);
    Not(in=x1_15, out=nx1_15);

    Mux(a=x1_0, b=nx1_0, sel=nx, out=x2_0);
    Mux(a=x1_1, b=nx1_1, sel=nx, out=x2_1);
    Mux(a=x1_2, b=nx1_2, sel=nx, out=x2_2);
    Mux(a=x1_3, b=nx1_3, sel=nx, out=x2_3);
    Mux(a=x1_4, b=nx1_4, sel=nx, out=x2_4);
    Mux(a=x1_5, b=nx1_5, sel=nx, out=x2_5);
    Mux(a=x1_6, b=nx1_6, sel=nx, out=x2_6);
    Mux(a=x1_7, b=nx1_7, sel=nx, out=x2_7);
    Mux(a=x1_8, b=nx1_8, sel=nx, out=x2_8);
    Mux(a=x1_9, b=nx1_9, sel=nx, out=x2_9);
    Mux(a=x1_10, b=nx1_10, sel=nx, out=x2_10);
    Mux(a=x1_11, b=nx1_11, sel=nx, out=x2_11);
    Mux(a=x1_12, b=nx1_12, sel=nx, out=x2_12);
    Mux(a=x1_13, b=nx1_13, sel=nx, out=x2_13);
    Mux(a=x1_14, b=nx1_14, sel=nx, out=x2_14);
    Mux(a=x1_15, b=nx1_15, sel=nx, out=x2_15);

    Mux(a=y[0], b=false, sel=zy, out=y1_0);
    Mux(a=y[1], b=false, sel=zy, out=y1_1);
    Mux(a=y[2], b=false, sel=zy, out=y1_2);
    Mux(a=y[3], b=false, sel=zy, out=y1_3);
    Mux(a=y[4], b=false, sel=zy, out=y1_4);
    Mux(a=y[5], b=false, sel=zy, out=y1_5);
    Mux(a=y[6], b=false, sel=zy, out=y1_6);
    Mux(a=y[7], b=false, sel=zy, out=y1_7);
    Mux(a=y[8], b=false, sel=zy, out=y1_8);
    Mux(a=y[9], b=false, sel=zy, out=y1_9);
    Mux(a=y[10], b=false, sel=zy, out=y1_10);
    Mux(a=y[11], b=false, sel=zy, out=y1_11);
    Mux(a=y[12], b=false, sel=zy, out=y1_12);
    Mux(a=y[13], b=false, sel=zy, out=y1_13);
    Mux(a=y[14], b=false, sel=zy, out=y1_14);
    Mux(a=y[15], b=false, sel=zy, out=y1_15);

    Not(in=y1_0, out=ny1_0);
    Not(in=y1_1, out=ny1_1);
    Not(in=y1_2, out=ny1_2);
    Not(in=y1_3, out=ny1_3);
    Not(in=y1_4, out=ny1_4);
    Not(in=y1_5, out=ny1_5);
    Not(in=y1_6, out=ny1_6);
    Not(in=y1_7, out=ny1_7);
    Not(in=y1_8, out=ny1_8);
    Not(in=y1_9, out=ny1_9);
    Not(in=y1_10, out=ny1_10);
    Not(in=y1_11, out=ny1_11);
    Not(in=y1_12, out=ny1_12);
    Not(in=y1_13, out=ny1_13);
    Not(in=y1_14, out=ny1_14);
    Not(in=y1_15, out=ny1_15);
    Mux(a=y1_0, b=ny1_0, sel=ny, out=y2_0);
    Mux(a=y1_1, b=ny1_1, sel=ny, out=y2_1);
    Mux(a=y1_2, b=ny1_2, sel=ny, out=y2_2);
    Mux(a=y1_3, b=ny1_3, sel=ny, out=y2_3);
    Mux(a=y1_4, b=ny1_4, sel=ny, out=y2_4);
    Mux(a=y1_5, b=ny1_5, sel=ny, out=y2_5);
    Mux(a=y1_6, b=ny1_6, sel=ny, out=y2_6);
    Mux(a=y1_7, b=ny1_7, sel=ny, out=y2_7);
    Mux(a=y1_8, b=ny1_8, sel=ny, out=y2_8);
    Mux(a=y1_9, b=ny1_9, sel=ny, out=y2_9);
    Mux(a=y1_10, b=ny1_10, sel=ny, out=y2_10);
    Mux(a=y1_11, b=ny1_11, sel=ny, out=y2_11);
    Mux(a=y1_12, b=ny1_12, sel=ny, out=y2_12);
    Mux(a=y1_13, b=ny1_13, sel=ny, out=y2_13);
    Mux(a=y1_14, b=ny1_14, sel=ny, out=y2_14);
    Mux(a=y1_15, b=ny1_15, sel=ny, out=y2_15);

    // Compute either (x2 + y2) or (x2 & y2) based on f
    HalfAdder(a= x2_0, b= y2_0, sum= sum0, carry= carry0);
    And(a=x2_0, b=y2_0, out=andOut_0);
    Mux(a=andOut_0, b=sum0, sel=f, out=out0);
    FullAdder(a=x2_1, b=y2_1, c=carry0, sum=sum1, carry=carry1);
    And(a=x2_1, b=y2_1, out=andOut_1);
    Mux(a=andOut_1, b=sum1, sel=f, out=out1);
    FullAdder(a=x2_2, b=y2_2, c=carry1, sum=sum2, carry=carry2);
    And(a=x2_2, b=y2_2, out=andOut_2);
    Mux(a=andOut_2, b=sum2, sel=f, out=out2);
    FullAdder(a=x2_3, b=y2_3, c=carry2, sum=sum3, carry=carry3);
    And(a=x2_3, b=y2_3, out=andOut_3);
    Mux(a=andOut_3, b=sum3, sel=f, out=out3);
    FullAdder(a=x2_4, b=y2_4, c=carry3, sum=sum4, carry=carry4);
    And(a=x2_4, b=y2_4, out=andOut_4);
    Mux(a=andOut_4, b=sum4, sel=f, out=out4);
    FullAdder(a=x2_5, b=y2_5, c=carry4, sum=sum5, carry=carry5);
    And(a=x2_5, b=y2_5, out=andOut_5);
    Mux(a=andOut_5, b=sum5, sel=f, out=out5);
    FullAdder(a=x2_6, b=y2_6, c=carry5, sum=sum6, carry=carry6);
    And(a=x2_6, b=y2_6, out=andOut_6);
    Mux(a=andOut_6, b=sum6, sel=f, out=out6);
    FullAdder(a=x2_7, b=y2_7, c=carry6, sum=sum7, carry=carry7);
    And(a=x2_7, b=y2_7, out=andOut_7);
    Mux(a=andOut_7, b=sum7, sel=f, out=out7);
    FullAdder(a=x2_8, b=y2_8, c=carry7, sum=sum8, carry=carry8);
    And(a=x2_8, b=y2_8, out=andOut_8);
    Mux(a=andOut_8, b=sum8, sel=f, out=out8);
    FullAdder(a=x2_9, b=y2_9, c=carry8, sum=sum9, carry=carry9);
    And(a=x2_9, b=y2_9, out=andOut_9);
    Mux(a=andOut_9, b=sum9, sel=f, out=out9);
    FullAdder(a=x2_10, b=y2_10, c=carry9, sum=sum10, carry=carry10);
    And(a=x2_10, b=y2_10, out=andOut_10);
    Mux(a=andOut_10, b=sum10, sel=f, out=out10);
    FullAdder(a=x2_11, b=y2_11, c=carry10, sum=sum11, carry=carry11);
    And(a=x2_11, b=y2_11, out=andOut_11);
    Mux(a=andOut_11, b=sum11, sel=f, out=out11);
    FullAdder(a=x2_12, b=y2_12, c=carry11, sum=sum12, carry=carry12);
    And(a=x2_12, b=y2_12, out=andOut_12);
    Mux(a=andOut_12, b=sum12, sel=f, out=out12);
    FullAdder(a=x2_13, b=y2_13, c=carry12, sum=sum13, carry=carry13);
    And(a=x2_13, b=y2_13, out=andOut_13);
    Mux(a=andOut_13, b=sum13, sel=f, out=out13);
    FullAdder(a=x2_14, b=y2_14, c=carry13, sum=sum14, carry=carry14);
    And(a=x2_14, b=y2_14, out=andOut_14);
    Mux(a=andOut_14, b=sum14, sel=f, out=out14);
    FullAdder(a=x2_15, b=y2_15, c=carry14, sum=sum15, carry=carry15);
    And(a=x2_15, b=y2_15, out=andOut_15);
    Mux(a=andOut_15, b=sum15, sel=f, out=out15);

    // Negate the output if no is 1 (out = !out when no = 1)
    Not(in=out0, out=negOut0);
    Mux(a=out0, b=negOut0, sel=no, out=finalOut0);
    Not(in=out1, out=negOut1);
    Mux(a=out1, b=negOut1, sel=no, out=finalOut1);
    Not(in=out2, out=negOut2);
    Mux(a=out2, b=negOut2, sel=no, out=finalOut2);
    Not(in=out3, out=negOut3);
    Mux(a=out3, b=negOut3, sel=no, out=finalOut3);
    Not(in=out4, out=negOut4);
    Mux(a=out4, b=negOut4, sel=no, out=finalOut4);
    Not(in=out5, out=negOut5);
    Mux(a=out5, b=negOut5, sel=no, out=finalOut5);
    Not(in=out6, out=negOut6);
    Mux(a=out6, b=negOut6, sel=no, out=finalOut6);
    Not(in=out7, out=negOut7);
    Mux(a=out7, b=negOut7, sel=no, out=finalOut7);
    Not(in=out8, out=negOut8);
    Mux(a=out8, b=negOut8, sel=no, out=finalOut8);
    Not(in=out9, out=negOut9);
    Mux(a=out9, b=negOut9, sel=no, out=finalOut9);
    Not(in=out10, out=negOut10);
    Mux(a=out10, b=negOut10, sel=no, out=finalOut10);
    Not(in=out11, out=negOut11);
    Mux(a=out11, b=negOut11, sel=no, out=finalOut11);
    Not(in=out12, out=negOut12);
    Mux(a=out12, b=negOut12, sel=no, out=finalOut12);
    Not(in=out13, out=negOut13);
    Mux(a=out13, b=negOut13, sel=no, out=finalOut13);
    Not(in=out14, out=negOut14);
    Mux(a=out14, b=negOut14, sel=no, out=finalOut14);
    Not(in=out15, out=negOut15);
    Mux(a=out15, b=negOut15, sel=no, out=finalOut15);

    // Set zr (1 if all out bits are zero)
    Or(a=finalOut0, b=finalOut1, out=zrTemp1);
    Or(a=zrTemp1, b=finalOut2, out=zrTemp2);
    Or(a=zrTemp1, b=finalOut3, out=zrTemp3);
    Or(a=zrTemp1, b=finalOut4, out=zrTemp4);
    Or(a=zrTemp1, b=finalOut5, out=zrTemp5);
    Or(a=zrTemp1, b=finalOut6, out=zrTemp6);
    Or(a=zrTemp1, b=finalOut7, out=zrTemp7);
    Or(a=zrTemp1, b=finalOut8, out=zrTemp8);
    Or(a=zrTemp1, b=finalOut9, out=zrTemp9);
    Or(a=zrTemp1, b=finalOut10, out=zrTemp10);
    Or(a=zrTemp1, b=finalOut11, out=zrTemp11);
    Or(a=zrTemp1, b=finalOut12, out=zrTemp12);
    Or(a=zrTemp1, b=finalOut13, out=zrTemp13);
    Or(a=zrTemp1, b=finalOut14, out=zrTemp14);
    Or(a=zrTemp1, b=finalOut15, out=zrTempFinal);
    Not(in=zrTempFinal, out=zr);  // 최종 zr 값 계산

    // Set ng (1 if the most significant bit is 1, meaning negative)
    And(a=finalOut15, b=true, out=ng);

    Or(a= finalOut0, b=false, out=out[0]);
    Or(a= finalOut1, b=false, out=out[1] );
    Or(a= finalOut2, b=false, out=out[2] );
    Or(a= finalOut3, b=false, out=out[3] );
    Or(a= finalOut4, b=false, out=out[4] );
    Or(a= finalOut5, b=false, out=out[5] );
    Or(a= finalOut6, b=false, out=out[6] );
    Or(a= finalOut7, b=false, out=out[7] );
    Or(a= finalOut8, b=false, out=out[8] );
    Or(a= finalOut9, b=false, out=out[9] );
    Or(a= finalOut10, b=false, out=out[10] );
    Or(a= finalOut11, b=false, out=out[11] );
    Or(a= finalOut12, b=false, out=out[12] );
    Or(a= finalOut13, b=false, out=out[13] );
    Or(a= finalOut14, b=false, out=out[14] );
    Or(a= finalOut15, b=false, out=out[15] );
}
